@use 'sass:list';
@use 'sass:map';

@use 'typography' as typography;
// --------------;
//  Инструменты
// --------------;

@use 'sass:math';

// px to rem
@function rem($value) {
  @if math.is-unitless($value) {
    $value: $value * 1px;
  }

  @return math.div($value, typography.$root-font-size) * 1rem;
}

// px to em
@function em($value, $context-font-size) {
  @if math.is-unitless($value) {
    $value: $value * 1px;
  }
  @if math.is-unitless($context-font-size) {
    $context-font-size: $context-font-size * 1px;
  }
  @return math.div($value, $context-font-size) * 1em;
}

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num == null or math.unit($num) == '%' or math.unit($prev-num) == '%' {
      // Do nothing
    } @else if not math.compatible($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
  @if list.length($map) > 0 {
    $values: map.values($map);
    $first-value: list.nth($values, 1);

    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}
